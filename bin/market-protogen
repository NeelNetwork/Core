#! /usr/bin/env python3

#   Copyright (c) 2019 Neel Network

#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:

#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.

#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#   --------------------------------------------------------------------------

from glob import glob
import os
import re
import tempfile
from os.path import dirname as DIRNAME

from grpc.tools.protoc import main as _protoc

TOP_DIR = DIRNAME(DIRNAME(__file__))
SRC_DIR = os.path.join(TOP_DIR, 'protos')


def make_protobuf(path, pkg_name):
    OUT_DIR = os.path.join(TOP_DIR, path, pkg_name)
    os.makedirs(OUT_DIR, exist_ok=True)

    init_py = os.path.join(OUT_DIR, '__init__.py')

    if not os.path.exists(init_py):
        with open(init_py, mode='w'):
            pass

    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_pkg_dir = os.path.join(tmp_dir, pkg_name)
        os.makedirs(tmp_pkg_dir)

        cwd = os.getcwd()
        os.chdir(SRC_DIR)
        proto_files = glob("*.proto")
        os.chdir(cwd)

        for proto in proto_files:
            src = os.path.join(SRC_DIR, proto)
            dst = os.path.join(tmp_pkg_dir, proto)
            with open(src, encoding='utf-8') as fin:
                with open(dst, "w", encoding='utf-8') as fout:
                    src_contents = fin.read()
                    fixed_contents = fix_import(src_contents, pkg_name)
                    fout.write(fixed_contents)

        _protoc([
            __file__,
            "-I=%s" % tmp_dir,
            "--python_out=%s" % os.path.join(TOP_DIR, path),
        ] + glob("%s/*.proto" % tmp_pkg_dir))
        print("Generated protobuf classes: {}".format(OUT_DIR))

def fix_import(contents, pkg, sub_dir=False):
    pattern = r'^import "(.*)\.proto\"'
    if sub_dir:
        template = r'import "%s/\1_pb2/\1.proto"'
    else:
        template = r'import "%s/\1.proto"'

    return re.sub(
        pattern,
        lambda match: match.expand(template) % pkg,
        contents,
        flags=re.MULTILINE
    )

if __name__ == '__main__':
    make_protobuf('processor', 'marketplace_processor/protobuf')
    make_protobuf('ledger_sync', 'marketplace_ledger_sync/protobuf')
    make_protobuf('transaction_creation', 'marketplace_transaction/protobuf')
