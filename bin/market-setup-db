#!/usr/bin/env python3

#   Copyright (c) 2019 Neel Network

#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:

#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.

#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#   --------------------------------------------------------------------------

import sys
import argparse

import rethinkdb as re
from rethinkdb.errors import RqlRuntimeError


r = re.RethinkDB()


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('--host',
                        help='The host for the database',
                        default='localhost')
    parser.add_argument('--port',
                        help='The port for the database',
                        default='28015')
    parser.add_argument('--name',
                        help='The name of the database',
                        default='marketplace')
    return parser.parse_args(args)


def setup_db(host, port, name):
    conn = r.connect(host=host, port=port)
    print('Connection opened')
    try:
        print('Creating database:', name)
        r.db_create(name).run(conn)

        print('Creating table: accounts')
        r.db(name).table_create('accounts', primary_key='delta_id').run(conn)
        r.db(name).table('accounts').index_create('public_key').run(conn)

        print('Creating table: assets')
        r.db(name).table_create('assets', primary_key='delta_id').run(conn)
        r.db(name).table('assets').index_create('name').run(conn)

        print('Creating table: offers')
        r.db(name).table_create('offers', primary_key='delta_id').run(conn)
        r.db(name).table('offers').index_create('id').run(conn)

        print('Creating table: holdings')
        r.db(name).table_create('holdings', primary_key='delta_id').run(conn)
        r.db(name).table('holdings').index_create('id').run(conn)

        print('Creating table: blocks')
        r.db(name).table_create('blocks', primary_key='block_num').run(conn)
        r.db(name).table('blocks').index_create('block_id').run(conn)

        print('Creating table: auth')
        r.db(name).table_create('auth', primary_key='email').run(conn)
        r.db(name).table('auth').index_create('public_key').run(conn)

    except RqlRuntimeError:
        print('Database already exists:', name)

    finally:
        conn.close()
        print('Connection closed')


if __name__ == '__main__':
    opts = parse_args(sys.argv[1:])
    setup_db(opts.host, opts.port, opts.name)
